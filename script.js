// please, no cheating! 
 eval(atob("LyogZXNsaW50LWRpc2FibGUgbm8tYWxlcnQgKi8KCi8qKioqKioqKioqKioqKgogKiAgIFNMSUNFIDEKICoqKioqKioqKioqKioqLwoKZnVuY3Rpb24gdXBkYXRlQ29mZmVlVmlldyhjb2ZmZWVRdHkpIHsKICBjb25zdCBjb2ZmZWVDb3VudGVyRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvZmZlZV9jb3VudGVyJyk7CiAgY29mZmVlQ291bnRlckRpdi5pbm5lclRleHQgPSBjb2ZmZWVRdHk7Cn0KCmZ1bmN0aW9uIGNsaWNrQ29mZmVlKGRhdGEpIHsKICBkYXRhLmNvZmZlZSArPSAxOwogIHVwZGF0ZUNvZmZlZVZpZXcoZGF0YS5jb2ZmZWUpOwogIHJlbmRlclByb2R1Y2VycyhkYXRhKTsKfQoKLyoqKioqKioqKioqKioqCiAqICAgU0xJQ0UgMgogKioqKioqKioqKioqKiovCgpmdW5jdGlvbiB1bmxvY2tQcm9kdWNlcnMocHJvZHVjZXJzLCBjb2ZmZWVDb3VudCkgewogIHByb2R1Y2Vycy5mb3JFYWNoKHByb2R1Y2VyID0+IHsKICAgIGlmIChjb2ZmZWVDb3VudCA+PSBwcm9kdWNlci5wcmljZSAvIDIpIHsKICAgICAgcHJvZHVjZXIudW5sb2NrZWQgPSB0cnVlOwogICAgfQogIH0pOwp9CgpmdW5jdGlvbiBnZXRVbmxvY2tlZFByb2R1Y2VycyhkYXRhKSB7CiAgcmV0dXJuIGRhdGEucHJvZHVjZXJzLmZpbHRlcihwcm9kdWNlciA9PiBwcm9kdWNlci51bmxvY2tlZCk7Cn0KCmZ1bmN0aW9uIG1ha2VEaXNwbGF5TmFtZUZyb21JZChpZCkgewogIHJldHVybiBpZAogICAgLnNwbGl0KCdfJykKICAgIC5tYXAod29yZCA9PiB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKSkKICAgIC5qb2luKCcgJyk7Cn0KCi8vIFlvdSBzaG91bG5kJ3QgbmVlZCB0byBlZGl0IHRoaXMgZnVuY3Rpb24tLSBpdHMgdGVzdHMgc2hvdWxkIHBhc3Mgb25jZSB5b3UndmUgd3JpdHRlbiBtYWtlRGlzcGxheU5hbWVGcm9tSWQKZnVuY3Rpb24gbWFrZVByb2R1Y2VyRGl2KHByb2R1Y2VyKSB7CiAgY29uc3QgY29udGFpbmVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgY29udGFpbmVyRGl2LmNsYXNzTmFtZSA9ICdwcm9kdWNlcic7CiAgY29uc3QgZGlzcGxheU5hbWUgPSBtYWtlRGlzcGxheU5hbWVGcm9tSWQocHJvZHVjZXIuaWQpOwogIGNvbnN0IGN1cnJlbnRDb3N0ID0gcHJvZHVjZXIucHJpY2U7CiAgY29uc3QgaHRtbCA9IGAKICA8ZGl2IGNsYXNzPSJwcm9kdWNlci1jb2x1bW4iPgogICAgPGRpdiBjbGFzcz0icHJvZHVjZXItdGl0bGUiPiR7ZGlzcGxheU5hbWV9PC9kaXY+CiAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9ImJ1eV8ke3Byb2R1Y2VyLmlkfSI+QnV5PC9idXR0b24+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0icHJvZHVjZXItY29sdW1uIj4KICAgIDxkaXY+UXVhbnRpdHk6ICR7cHJvZHVjZXIucXR5fTwvZGl2PgogICAgPGRpdj5Db2ZmZWUvc2Vjb25kOiAke3Byb2R1Y2VyLmNwc308L2Rpdj4KICAgIDxkaXY+Q29zdDogJHtjdXJyZW50Q29zdH0gY29mZmVlPC9kaXY+CiAgPC9kaXY+CiAgYDsKICBjb250YWluZXJEaXYuaW5uZXJIVE1MID0gaHRtbDsKICByZXR1cm4gY29udGFpbmVyRGl2Owp9CgpmdW5jdGlvbiBkZWxldGVBbGxDaGlsZE5vZGVzKHBhcmVudCkgewogIHdoaWxlIChwYXJlbnQuZmlyc3RDaGlsZCkgewogICAgcGFyZW50LnJlbW92ZUNoaWxkKHBhcmVudC5maXJzdENoaWxkKTsKICB9Cn0KCmZ1bmN0aW9uIHJlbmRlclByb2R1Y2VycyhkYXRhKSB7CiAgdW5sb2NrUHJvZHVjZXJzKGRhdGEucHJvZHVjZXJzLCBkYXRhLmNvZmZlZSk7CiAgY29uc3QgcHJvZHVjZXJDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjZXJfY29udGFpbmVyJyk7CiAgZGVsZXRlQWxsQ2hpbGROb2Rlcyhwcm9kdWNlckNvbnRhaW5lcik7CiAgZ2V0VW5sb2NrZWRQcm9kdWNlcnMoZGF0YSkuZm9yRWFjaChwcm9kdWNlciA9PiB7CiAgICBwcm9kdWNlckNvbnRhaW5lci5hcHBlbmRDaGlsZChtYWtlUHJvZHVjZXJEaXYocHJvZHVjZXIpKTsKICB9KTsKfQoKLyoqKioqKioqKioqKioqCiAqICAgU0xJQ0UgMwogKioqKioqKioqKioqKiovCgpmdW5jdGlvbiBnZXRQcm9kdWNlckJ5SWQoZGF0YSwgcHJvZHVjZXJJZCkgewogIHJldHVybiBkYXRhLnByb2R1Y2Vycy5maW5kKHByb2R1Y2VyID0+IHByb2R1Y2VySWQgPT09IHByb2R1Y2VyLmlkKTsKfQoKZnVuY3Rpb24gY2FuQWZmb3JkUHJvZHVjZXIoZGF0YSwgcHJvZHVjZXJJZCkgewogIHJldHVybiBnZXRQcm9kdWNlckJ5SWQoZGF0YSwgcHJvZHVjZXJJZCkucHJpY2UgPD0gZGF0YS5jb2ZmZWU7Cn0KCmZ1bmN0aW9uIHVwZGF0ZUNQU1ZpZXcoY3BzKSB7CiAgY29uc3QgY3BzRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NwcycpOwogIGNwc0Rpdi5pbm5lclRleHQgPSBjcHM7Cn0KCmZ1bmN0aW9uIHVwZGF0ZVByaWNlKG9sZFByaWNlKSB7CiAgcmV0dXJuIE1hdGguZmxvb3Iob2xkUHJpY2UgKiAxLjI1KTsKfQoKZnVuY3Rpb24gYXR0ZW1wdFRvQnV5UHJvZHVjZXIoZGF0YSwgcHJvZHVjZXJJZCkgewogIGlmIChjYW5BZmZvcmRQcm9kdWNlcihkYXRhLCBwcm9kdWNlcklkKSkgewogICAgY29uc3QgcHJvZHVjZXIgPSBnZXRQcm9kdWNlckJ5SWQoZGF0YSwgcHJvZHVjZXJJZCk7CiAgICBkYXRhLmNvZmZlZSAtPSBwcm9kdWNlci5wcmljZTsKICAgIHByb2R1Y2VyLnF0eSArPSAxOwogICAgcHJvZHVjZXIucHJpY2UgPSB1cGRhdGVQcmljZShwcm9kdWNlci5wcmljZSk7CiAgICBkYXRhLnRvdGFsQ1BTICs9IHByb2R1Y2VyLmNwczsKICAgIHJldHVybiB0cnVlOwogIH0gZWxzZSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQp9CgpmdW5jdGlvbiBidXlCdXR0b25DbGljayhldmVudCwgZGF0YSkgewogIGlmIChldmVudC50YXJnZXQudGFnTmFtZSA9PT0gJ0JVVFRPTicpIHsKICAgIGNvbnN0IHByb2R1Y2VySWQgPSBldmVudC50YXJnZXQuaWQuc2xpY2UoNCk7CiAgICBjb25zdCByZXN1bHQgPSBhdHRlbXB0VG9CdXlQcm9kdWNlcihkYXRhLCBwcm9kdWNlcklkKTsKICAgIGlmICghcmVzdWx0KSB7CiAgICAgIHdpbmRvdy5hbGVydCgnTm90IGVub3VnaCBjb2ZmZWUhJyk7CiAgICB9IGVsc2UgewogICAgICByZW5kZXJQcm9kdWNlcnMoZGF0YSk7CiAgICAgIHVwZGF0ZUNvZmZlZVZpZXcoZGF0YS5jb2ZmZWUpOwogICAgICB1cGRhdGVDUFNWaWV3KGRhdGEudG90YWxDUFMpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gdGljayhkYXRhKSB7CiAgZGF0YS5jb2ZmZWUgKz0gZGF0YS50b3RhbENQUzsKICB1cGRhdGVDb2ZmZWVWaWV3KGRhdGEuY29mZmVlKTsKICByZW5kZXJQcm9kdWNlcnMoZGF0YSk7Cn0KCi8qKioqKioqKioqKioqKioqKioqKioqKioqCiAqICBTdGFydCB5b3VyIGVuZ2luZXMhCiAqKioqKioqKioqKioqKioqKioqKioqKioqLwoKLy8gWW91IGRvbid0IG5lZWQgdG8gZWRpdCBhbnkgb2YgdGhlIGNvZGUgYmVsb3cKLy8gQnV0IGl0IGlzIHdvcnRoIHJlYWRpbmcgc28geW91IGtub3cgd2hhdCBpdCBkb2VzIQoKLy8gU28gZmFyIHdlJ3ZlIGp1c3QgZGVmaW5lZCBzb21lIGZ1bmN0aW9uczsgd2UgaGF2ZW4ndCBhY3R1YWxseQovLyBjYWxsZWQgYW55IG9mIHRoZW0uIE5vdyBpdCdzIHRpbWUgdG8gZ2V0IHRoaW5ncyBtb3ZpbmcuCgovLyBXZSdsbCBiZWdpbiB3aXRoIGEgY2hlY2sgdG8gc2VlIGlmIHdlJ3JlIGluIGEgd2ViIGJyb3dzZXI7IGlmIHdlJ3JlIGp1c3QgcnVubmluZyB0aGlzIGNvZGUgaW4gbm9kZSBmb3IgcHVycG9zZXMgb2YgdGVzdGluZywgd2UgZG9uJ3Qgd2FudCB0byAnc3RhcnQgdGhlIGVuZ2luZXMnLgoKLy8gSG93IGRvZXMgdGhpcyBjaGVjayB3b3JrPyBOb2RlIGdpdmVzIHVzIGFjY2VzcyB0byBhIGdsb2JhbCB2YXJpYWJsZSAvLy8gY2FsbGVkIGBwcm9jZXNzYCwgYnV0IHRoaXMgdmFyaWFibGUgaXMgdW5kZWZpbmVkIGluIHRoZSBicm93c2VyLiBTbywKLy8gd2UgY2FuIHNlZSBpZiB3ZSdyZSBpbiBub2RlIGJ5IGNoZWNraW5nIHRvIHNlZSBpZiBgcHJvY2Vzc2AgZXhpc3RzLgppZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnKSB7CiAgLy8gR2V0IHN0YXJ0aW5nIGRhdGEgZnJvbSB0aGUgd2luZG93IG9iamVjdAogIC8vIChUaGlzIGNvbWVzIGZyb20gZGF0YS5qcykKICBjb25zdCBkYXRhID0gd2luZG93LmRhdGE7CgogIC8vIEFkZCBhbiBldmVudCBsaXN0ZW5lciB0byB0aGUgZ2lhbnQgY29mZmVlIGVtb2ppCiAgY29uc3QgYmlnQ29mZmVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JpZ19jb2ZmZWUnKTsKICBiaWdDb2ZmZWUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBjbGlja0NvZmZlZShkYXRhKSk7CgogIC8vIEFkZCBhbiBldmVudCBsaXN0ZW5lciB0byB0aGUgY29udGFpbmVyIHRoYXQgaG9sZHMgYWxsIG9mIHRoZSBwcm9kdWNlcnMKICAvLyBQYXNzIGluIHRoZSBicm93c2VyIGV2ZW50IGFuZCBvdXIgZGF0YSBvYmplY3QgdG8gdGhlIGV2ZW50IGxpc3RlbmVyCiAgY29uc3QgcHJvZHVjZXJDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZHVjZXJfY29udGFpbmVyJyk7CiAgcHJvZHVjZXJDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7CiAgICBidXlCdXR0b25DbGljayhldmVudCwgZGF0YSk7CiAgfSk7CgogIC8vIENhbGwgdGhlIHRpY2sgZnVuY3Rpb24gcGFzc2luZyBpbiB0aGUgZGF0YSBvYmplY3Qgb25jZSBwZXIgc2Vjb25kCiAgc2V0SW50ZXJ2YWwoKCkgPT4gdGljayhkYXRhKSwgMTAwMCk7Cn0KLy8gTWVhbndoaWxlLCBpZiB3ZSBhcmVuJ3QgaW4gYSBicm93c2VyIGFuZCBhcmUgaW5zdGVhZCBpbiBub2RlCi8vIHdlJ2xsIG5lZWQgdG8gZXhwb3J0cyB0aGUgY29kZSB3cml0dGVuIGhlcmUgc28gd2UgY2FuIGltcG9ydCBhbmQKLy8gRG9uJ3Qgd29ycnkgaWYgaXQncyBub3QgY2xlYXIgZXhhY3RseSB3aGF0J3MgZ29pbmcgb24gaGVyZTsKLy8gV2UganVzdCBuZWVkIHRoaXMgdG8gcnVuIHRoZSB0ZXN0cyBpbiBNb2NoYS4KZWxzZSBpZiAocHJvY2VzcykgewogIG1vZHVsZS5leHBvcnRzID0gewogICAgdXBkYXRlQ29mZmVlVmlldywKICAgIGNsaWNrQ29mZmVlLAogICAgdW5sb2NrUHJvZHVjZXJzLAogICAgZ2V0VW5sb2NrZWRQcm9kdWNlcnMsCiAgICBtYWtlRGlzcGxheU5hbWVGcm9tSWQsCiAgICBtYWtlUHJvZHVjZXJEaXYsCiAgICBkZWxldGVBbGxDaGlsZE5vZGVzLAogICAgcmVuZGVyUHJvZHVjZXJzLAogICAgdXBkYXRlQ1BTVmlldywKICAgIGdldFByb2R1Y2VyQnlJZCwKICAgIGNhbkFmZm9yZFByb2R1Y2VyLAogICAgdXBkYXRlUHJpY2UsCiAgICBhdHRlbXB0VG9CdXlQcm9kdWNlciwKICAgIGJ1eUJ1dHRvbkNsaWNrLAogICAgdGljawogIH07Cn0K"));